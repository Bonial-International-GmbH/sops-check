---
name: release
on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - "v*"

permissions: read-all

jobs:
  release-please:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      release_created: ${{ steps.release-please.outputs.release_created }}
      tag_name: ${{ steps.release-please.outputs.tag_name }}
    steps:
      - name: Run release-please
        id: release-please
        uses: googleapis/release-please-action@v4

  publish-image:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    env:
      IMAGE_NAME: sops-check
      TAG_NAME: ${{ needs.release-please.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Format Tag
        id: formatTag
        run: |
          IMAGE_ID="ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME"

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo "$IMAGE_ID" | tr '[:upper:]' '[:lower:]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention for `main` branch
          if [ "$VERSION" == "main" ]; then
            VERSION=latest
          fi

          echo IMAGE_ID="$IMAGE_ID"
          echo VERSION="$VERSION"

          echo "TAG=$IMAGE_ID:$VERSION" >> "$GITHUB_OUTPUT"

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.formatTag.outputs.TAG }}

  publish-binaries:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Setup
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
